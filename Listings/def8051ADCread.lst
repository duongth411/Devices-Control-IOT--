C51 COMPILER V9.60.0.0   DEF8051ADCREAD                                                    05/16/2020 17:58:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DEF8051ADCREAD
OBJECT MODULE PLACED IN .\Objects\def8051ADCread.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lib\def8051ADCread.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\lib;
                    -.\Include) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\def8051ADCread.lst) OBJECT(.\Objects\def8051ADCread.o
                    -bj)

line level    source

   1          #include "def8051ADCread.h"
   2          #include "N76E003.h"
   3          #include "Common.h"
   4          #include "SFR_Macro.h"
   5          #include "Function_define.h"
   6          bit BIT_TMP;
   7          void fn8051ADCBypass (void){ 
   8   1              unsigned char i;
   9   1              for (i=0;i<0x03;i++){
  10   2                      clr_ADCF;
  11   2                      set_ADCS;
  12   2                      while(ADCF == 0);
  13   2              }
  14   1      }
  15          float fn8051ADCRead_bandgap(){ //IAP read
  16   1              unsigned char BandgapHigh,BandgapLow,BandgapMark;       
  17   1              float Bandgap_Value,ADCBandgap_Voltage;
  18   1              set_IAPEN;
  19   1              IAPCN = 0x04;
  20   1              IAPAL = 0x0d;
  21   1              IAPAH = 0x00;
  22   1              set_IAPGO;
  23   1              BandgapLow  = IAPFD;
  24   1              BandgapMark = BandgapLow&0xF0;
  25   1                      
  26   1              if (BandgapMark==0x80)
  27   1              {
  28   2                      BandgapLow = BandgapLow&0x0F;
  29   2                      IAPAL = 0x0C;
  30   2                      IAPAH = 0x00;
  31   2                      set_IAPGO;
  32   2                      BandgapHigh = IAPFD;
  33   2                      Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
  34   2                      ADCBandgap_Voltage = Bandgap_Value*3/4;
  35   2              }
  36   1              if (BandgapMark==0x00)
  37   1              {
  38   2                      BandgapLow = BandgapLow&0x0F;
  39   2                      IAPAL = 0x0C;
  40   2                      IAPAH = 0x00;
  41   2                      set_IAPGO;
  42   2                      BandgapHigh = IAPFD;
  43   2                      Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
  44   2                      ADCBandgap_Voltage= Bandgap_Value*3/4;
  45   2              }
  46   1              if (BandgapMark==0x90)
  47   1              {
  48   2                      IAPAL = 0x0E;
  49   2                      IAPAH = 0x00;
  50   2                      set_IAPGO;
  51   2                      BandgapHigh = IAPFD;
  52   2                      IAPAL = 0x0F;
  53   2                      IAPAH = 0x00;
C51 COMPILER V9.60.0.0   DEF8051ADCREAD                                                    05/16/2020 17:58:24 PAGE 2   

  54   2                      set_IAPGO;
  55   2                      BandgapLow = IAPFD;
  56   2                      BandgapLow = BandgapLow&0x0F;
  57   2                      Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
  58   2                      ADCBandgap_Voltage= Bandgap_Value*3/4;
  59   2              }
  60   1              clr_IAPEN;
  61   1              return ADCBandgap_Voltage;
  62   1      }
  63          float fn8051ADCREAD(unsigned char ADCchannel,bit return_type){
  64   1              float bandgapvalue,VDD,VAIN,ADCvalue,VADC;
  65   1              if(return_type == 0){
  66   2                      fn8051ADCRead_bandgap();
  67   2                      ADCCON0 = 0x08;
  68   2                      ADCCON1 = 0x01;
  69   2                      clr_ADCF;
  70   2                      set_ADCS;
  71   2                      while(ADCF == 0){};
  72   2                      bandgapvalue = (ADCRH<<4) + ADCRL;
  73   2                      VDD = (0xFFF/bandgapvalue)*fn8051ADCRead_bandgap();
  74   2                      Disable_ADC;
  75   2                      ADCCON0 = ADCchannel;
  76   2                      ADCCON1 = 0x01;
  77   2                      clr_ADCF;
  78   2                      set_ADCS;
  79   2                      while(ADCF == 0){};
  80   2                      ADCvalue = (ADCRH<<4) + ADCRL;
  81   2                      VAIN = (float)ADCvalue/0x1000;
  82   2                      VADC = (float)(VAIN*VDD);
  83   2                      Disable_ADC;
  84   2                      VADC = VADC/1000;
  85   2                      return VADC;    
  86   2              }
  87   1              else{
  88   2                      ADCCON0 = ADCchannel;
  89   2                      ADCCON1 = 0x01;
  90   2                      clr_ADCF;
  91   2                      set_ADCS;
  92   2                      while(ADCF == 0){};
  93   2                      ADCvalue = (ADCRH<<4) + ADCRL;
  94   2                      Disable_ADC;    
  95   2                      return ADCvalue;        
  96   2              }
  97   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    696    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
